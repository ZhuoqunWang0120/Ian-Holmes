X<-as(t(otu_table(xphy)),"matrix")
N<-nrow(X)
S<-ncol(X)
ITA<-0.1
NU<-0.1
ITER_MAX<-1000
K<-1
ALPHA<-matrix(rep(0.001,K*S),nrow = K)
#LAMBDA<-matrix(rep(-10,K*S),nrow=K)
PI<-runif(K,10^(-10),1-10^(-10))
lnEZIK<-matrix(0,nrow=N,ncol=K)

lB<-function(x){
  mbf<-sum(lgamma(x))-lgamma(sum(x))
  return(mbf)
}
#calculate log(sum(exp(x)))
lsum<-function(x){
  m<-max(x)
  ls<-m+log(sum(exp(x-m)))
  return(ls)
}
#function for E[z_{ik}]
LEZIK<-function(K,PI,ALPHA,i,k){
  LSUMX<-numeric(K)
  for (cnt in 1:K){
    LSUMX[cnt]<-log(PI[cnt])+lB(ALPHA[cnt,]+X[i,])-lB(ALPHA[cnt,])
  }
  lnezik<-log(PI[k])+lB(ALPHA[k,]+X[i,])-lB(ALPHA[k,])-lsum(LSUMX)
  return(lnezik)
}

for(i in 1:N){
	for (k in 1:K){
		lnEZIK[i,k]<-LEZIK(K,PI,ALPHA,i,k)
	}
}

#function for NEGATIVE Equation 11 [for loop to be modified!!!]
Eq11<-function(lnEZIK,PI,ALPHA,X,NU,ITA){
  p1<-0
  for (i in 1:N){
    s<-0
    for (k in 1:K){
      s<-s+exp(lnEZIK[i,k])*(log(PI[k])+lB(ALPHA[k,]+X[i,])-lB(ALPHA[k,]))
    }
    p1<-p1+s
  }
  p2<--NU*sum(ALPHA)
  p3<-ITA*sum(log(ALPHA))
  return(-p1-p2-p3)
}
tf<-function(x){
  A<-matrix(exp(x),nrow=K,byrow=TRUE)
  Eq11(lnEZIK,PI,A,X,NU,ITA)
}

dtf2<-function(x){
  x<-matrix(exp(x),nrow=K,byrow=TRUE)
  EZIK<-exp(lnEZIK)
  arows<-apply(x,1,function (y) {sum(y)})
  xrows<-apply(X,1,function (y) {sum(y)})
  matarows<-matrix(rep(arows,N),nrow=N,byrow=TRUE)
  tmp<-(digamma(matarows+matrix(rep(xrows,K),nrow=N,byrow=FALSE)))*EZIK
  A2<-matrix(rep(apply(tmp,2,function(y){sum(y)}),S),nrow=K,byrow=FALSE)*x
  A3<-matrix(rep(apply(EZIK,2,function(y) {sum(y)}),S),nrow=K,byrow=FALSE)*digamma(x)*x
  A4<-matrix(rep(apply(EZIK*digamma(matarows),2,function(y){sum(y)}),S),nrow=K,byrow=FALSE)*x
  Xarr<-array(rep(X,K),dim=c(dim(X),K))
  Aarr0<-array(rep(x,N),dim=c(dim(x),N))
  Zarr0<-array(rep(EZIK,S),dim=c(dim(EZIK),S))
  Aarr<-aperm(Aarr0,c(3,2,1))#只要从dim观察即可
  Zarr<-aperm(Zarr0,c(1,3,2))
  arr<-Aarr+Xarr
  arr<-digamma(arr)
  arr<-Zarr*arr
  mat<-apply(arr,2:3,function(y){sum(y)})
  A1<-t(mat)*x
  Jacobian<- -A1+A2+A3-A4+NU*x-ITA
  der<-as.vector(t(Jacobian))
  return(der)
}

#this is negative
dtf2psi1<-function(x){
  x<-matrix(exp(x),nrow=K,byrow=TRUE)
  EZIK<-exp(lnEZIK)
  arows<-apply(x,1,function (y) {sum(y)})
  xrows<-apply(X,1,function (y) {sum(y)})
  matarows<-matrix(rep(arows,N),nrow=N,byrow=TRUE)
  tmp<-(psigamma(matarows+matrix(rep(xrows,K),nrow=N,byrow=FALSE),1))*EZIK
  A2<-matrix(rep(apply(tmp,2,function(y){sum(y)}),S),nrow=K,byrow=FALSE)*x
  A3<-matrix(rep(apply(EZIK,2,function(y) {sum(y)}),S),nrow=K,byrow=FALSE)*psigamma(x,1)*x
  A4<-matrix(rep(apply(EZIK*psigamma(matarows,1),2,function(y){sum(y)}),S),nrow=K,byrow=FALSE)*x
  Xarr<-array(rep(X,K),dim=c(dim(X),K))
  Aarr0<-array(rep(x,N),dim=c(dim(x),N))
  Zarr0<-array(rep(EZIK,S),dim=c(dim(EZIK),S))
  Aarr<-aperm(Aarr0,c(3,2,1))#只要从dim观察即可
  Zarr<-aperm(Zarr0,c(1,3,2))
  arr<-Aarr+Xarr
  arr<-psigamma(arr,1)
  arr<-Zarr*arr
  mat<-apply(arr,2:3,function(y){sum(y)})
  A1<-t(mat)*x
  Jacobian<- -A1+A2+A3-A4+NU*x-ITA
  der<-as.vector(t(Jacobian))
  return(der)
}

#this is negative
hessdiaglam<-function(Q){
  x<-Q[1:(K*S)]
  h<-dtf2(x)+exp(x)*dtf2psi1(x)
  return(h)
}
#this is negative, 3d array,至少可以run
hesslamjkjl<-function(Q) {
  x<-Q[1:(K*S)]
  x<-matrix(exp(x),nrow=K,byrow=TRUE)
  EZIK<-exp(lnEZIK)
  arows<-apply(x,1,function (y) {sum(y)})
  xrows<-apply(X,1,function (y) {sum(y)})
  matarows<-matrix(rep(arows,N),nrow=N,byrow=TRUE)
  tmp<-(psigamma(matarows+matrix(rep(xrows,K),nrow=N,byrow=FALSE),1))*EZIK
  A2<-matrix(rep(apply(tmp,2,function(y){sum(y)}),S),nrow=K,byrow=FALSE)
  A4<-matrix(rep(apply(EZIK*psigamma(matarows,1),2,function(y){sum(y)}),S),nrow=K,byrow=FALSE)
  #把矩阵mat面朝前方重复n次的array：array(rep(mat,n),dim=c(dim(mat),n))
  jkjl<-array(rep((A2-A4),S),dim=c(dim(A2),S))
  Ajk<-array(rep(x,S),dim=c(dim(x),S))
  Ajl<-aperm(Ajk,c(1,3,2))
  Ajkjl<-jkjl*Ajk*Ajl
  return(Ajkjl)
}

hesslam<-function(Q){
  hjkjl<-hesslamjkjl(Q)
  hdiag<-hessdiaglam(Q)
  for (j in 1:K){
    for (k in 1:S){
      hjkjl[j,k,k]<-hdiag[(j-1)*S+k]
    }
  }
  return(hjkjl)
}

#this is negative
hesspi<-function(Q){
  x<-Q[(K*S+1):(K*(S+1))]
  h<-apply(exp(lnEZIK),2,function(x){sum(x)})/x^2
  return(h)
}

#calculate det(H)
#[可能要用logdet，不确定会不会越界]
HDET<-function(Q){
  DETPI<-prod(hesspi(Q))
  DETLAM<-prod(apply(hesslam(Q),1,function(x){det(as(x,"matrix"))}))
  DETH<-DETPI*DETLAM
  return(DETH)
}

lnnpi<-function(lnEZIK){
  lnpi<-apply(lnEZIK,2,function(x){lsum(x)})
  return(lnpi)
}
############################################################################################
#Laplace Approximation【未测试】
J<-apply(X,1,function(x){sum(x)})
S1<-sum(lfactorial(J))
lfactorialX<-lfactorial(X)
P<--apply(lfactorialX,1,function(x) {sum(x)})
S2<-sum(P)
logEq9<-function(Q){8
  alpha<-matrix(Q[1:(K*S)],nrow=K,byrow=TRUE)
  pik<-Q[(K*S+1):(K*(S+1))]
  lyik<-matrix(0,nrow=N,ncol=K)
  sum.i<-rep(0,N)
  for (i in 1:N){
    for (k in 1:K){
      lyik[i,k]<-lB(alpha[k,]+X[i,])-lB(alpha[k,])+log(pik[k])
    }
    sum.i[i]<-lsum(lyik[i,])
  }
  S3<-sum(sum.i)
  return(S1+S2+S3)
}

E1<--K*S*log(gamma(ITA))+ITA*K*S*log(NU)
logEq5<-function(Q){
  alpha<-matrix(Q[1:(K*S)],nrow=K,byrow=TRUE)
  E2<--NU*sum(alpha)
  E3<-(ITA-1)*sum(log(alpha))
  return(E1+E2+E3)
}
Eq14<-function(Q) {
  approx<-logEq9(Q)+logEq5(Q)+K*(S+1)*log(2*pi)/2-log(HDET(Q))/2
  return(approx)
}



